"use client"

import { Label } from "@/components/ui/label"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Shield, CheckCircle, Copy, ExternalLink } from "lucide-react"
import { useRouter, useSearchParams } from "next/navigation"
import { useConfidentialProcessing } from "../../hooks/use-confidential-processing"

export default function ProcessingPage() {
  const router = useRouter()
  const [stage, setStage] = useState<"processing" | "complete">("processing")
  const [generatedHash, setGeneratedHash] = useState("")
  const [copied, setCopied] = useState(false)

  const searchParams = useSearchParams()
  const taskId = searchParams.get("taskId")
  const initialHash = searchParams.get("hash")

  const { checkTaskStatus } = useConfidentialProcessing()
  const [taskStatus, setTaskStatus] = useState<string>("RUNNING")

  useEffect(() => {
    if (!taskId) {
      setStage("complete")
      setGeneratedHash(initialHash || "0x7f9a2b8c3d4e5f6a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c")
      return
    }

    const checkStatus = async () => {
      try {
        const status = await checkTaskStatus(taskId)
        setTaskStatus(status)

        if (status === "COMPLETED") {
          setStage("complete")
          setGeneratedHash(initialHash || "Hash generated by iExec")
        } else if (status === "FAILED" || status === "ERROR") {
          console.error("Task failed:", status)
        }
      } catch (error) {
        console.error("Error checking status:", error)
      }
    }

    // Check status every 5 seconds if in progress
    const interval = setInterval(checkStatus, 5000)
    checkStatus() // Check immediately

    return () => clearInterval(interval)
  }, [taskId, initialHash, checkTaskStatus])

  const copyHash = async () => {
    await navigator.clipboard.writeText(generatedHash)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const handleMintNFT = () => {
    router.push("/dashboard")
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
      {/* Header */}
      <header className="border-b bg-white/80 backdrop-blur-sm">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
              <Shield className="w-5 h-5 text-white" />
            </div>
            <span className="text-xl font-bold text-gray-900">zkResume Snapshots</span>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-16 max-w-2xl">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            {stage === "processing" ? "Processing with iExec" : "Your Snapshot is ready"}
          </h1>
          <p className="text-gray-600">
            {stage === "processing"
              ? `Processing in SGX enclave... Status: ${taskStatus}`
              : "Your anonymous credential has been generated using confidential computing"}
          </p>
        </div>

        <Card className="shadow-lg border-0">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              {stage === "processing" ? (
                <>
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600" />
                  Processing in private enclave...
                </>
              ) : (
                <>
                  <CheckCircle className="w-5 h-5 text-green-600" />
                  Processing completed
                </>
              )}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {stage === "processing" ? (
              <div className="space-y-4">
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Validating information</span>
                    <span className="text-green-600">âœ“ Completed</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div className="bg-green-600 h-2 rounded-full w-full" />
                  </div>
                </div>

                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Generating cryptographic proof</span>
                    <span className="text-blue-600">In progress...</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div className="bg-blue-600 h-2 rounded-full w-3/4 animate-pulse" />
                  </div>
                </div>

                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Creating anonymous Snapshot</span>
                    <span className="text-gray-400">Pending</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div className="bg-gray-300 h-2 rounded-full w-1/4" />
                  </div>
                </div>

                {taskId && stage === "processing" && (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mt-4">
                    <p className="text-sm text-blue-800">
                      <strong>iExec task ID:</strong>
                      <br />
                      <code className="text-xs bg-blue-100 p-1 rounded font-mono break-all">{taskId}</code>
                    </p>
                  </div>
                )}

                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mt-6">
                  <p className="text-sm text-blue-800">
                    <strong>Secure processing:</strong> Your information is being processed in a confidential enclave.
                    No one can access your data during this process.
                  </p>
                </div>
              </div>
            ) : (
              <div className="space-y-6">
                <div className="bg-green-50 border border-green-200 rounded-lg p-6">
                  <div className="flex items-center gap-3 mb-4">
                    <CheckCircle className="w-6 h-6 text-green-600" />
                    <h3 className="font-semibold text-green-800">Your Snapshot is ready</h3>
                  </div>
                  <p className="text-green-700 mb-4">
                    We have generated a cryptographic proof of your work experience. You can mint it as an anonymous
                    credential.
                  </p>

                  <div className="bg-white rounded-lg p-4 border">
                    <Label className="text-sm font-medium text-gray-700 mb-2 block">Generated Snapshot hash:</Label>
                    <div className="flex items-center gap-2">
                      <code className="flex-1 text-xs bg-gray-100 p-2 rounded font-mono break-all">
                        {generatedHash}
                      </code>
                      <Button variant="outline" size="sm" onClick={copyHash} className="shrink-0">
                        {copied ? <CheckCircle className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                      </Button>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <h4 className="font-semibold text-gray-900">What does your Snapshot include?</h4>
                  <div className="grid gap-3 text-sm">
                    <div className="flex items-center gap-2">
                      <CheckCircle className="w-4 h-4 text-green-600" />
                      <span>Proof of years of experience in your industry</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <CheckCircle className="w-4 h-4 text-green-600" />
                      <span>Verification of responsibility level</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <CheckCircle className="w-4 h-4 text-green-600" />
                      <span>Validation of professional achievements</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <CheckCircle className="w-4 h-4 text-green-600" />
                      <span>Generation timestamp</span>
                    </div>
                  </div>
                </div>

                <Button onClick={handleMintNFT} className="w-full py-6 text-lg">
                  Mint NFT on Neon EVM
                  <ExternalLink className="ml-2 w-5 h-5" />
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
